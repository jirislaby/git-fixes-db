#!/usr/bin/perl -w
use strict;
use DBI;
use Getopt::Long;
use Term::ANSIColor qw(colored);

my $oneline = 0;
my $db_file = 'cve-fixes.db';
my $db;

GetOptions(
	'db=s' => \$db_file,
	'oneline' => \$oneline,
) or die("Error in command line arguments\n");

die "no $db_file" unless (-e $db_file);

$db = DBI->connect("dbi:SQLite:dbname=$db_file", undef, undef,
	{AutoCommit => 0}) or
	die "connect to db error: " . DBI::errstr;

$db->do('PRAGMA foreign_keys = ON;') or
	die "cannot enable foreign keys";

$SIG{INT} = sub { exit 1; };
$SIG{TERM} = sub { exit 1; };

if (scalar @ARGV > 1) {
	my $id = shift @ARGV;
	my $fixed_by = shift @ARGV;

	my $ins_sha = $db->prepare('INSERT OR IGNORE INTO shas(sha, upstream) VALUES (?, 0);') or
		die "cannot prepare sha";
	$ins_sha->execute($fixed_by);
	my $up_fixes = $db->prepare('UPDATE fixes SET fixed_by = ' .
		'(SELECT id FROM shas WHERE sha = ? AND upstream = 0) ' .
		'WHERE fixes.id = ?') or
		die "cannot prepare fixes";
	$up_fixes->execute($fixed_by, $id);
}

my $sel = $db->prepare(
	'SELECT fixes.id, fixes.potential, prod.prod, prod.kver, refs.ref, ' .
		'substr(shas_u.sha, 1, 12) AS sha, ' .
		'substr(shas_s.sha, 1, 12) AS fixed_by ' .
	'FROM fixes ' .
	'LEFT JOIN prod ON fixes.prod = prod.id ' .
	'LEFT JOIN shas AS shas_u ON fixes.sha = shas_u.id AND shas_u.upstream = 1 ' .
	'LEFT JOIN shas AS shas_s ON fixes.fixed_by = shas_s.id AND shas_s.upstream = 0 ' .
	'LEFT JOIN refs ON fixes.ref = refs.id ' .
	'ORDER BY prod.kver, prod.prod, fixes.id;') or
	die "cannot prepare";
$sel->execute();
my $pr = sprintf "%4s | %4s | %20s | %5s | %-30s | %12s | %12s | %-30s",
		'ID', 'POT', 'PRODUCT', 'KVER', 'REFERENCES', 'SHA', 'FIXED BY', 'COMMAND';
print "$pr\n";
print '-' x length($pr), "\n";

while (my $row = $sel->fetchrow_hashref) {
	printf "%4u | %4u | %20s | %2u.%-2u | %-30s | %12s | %12s | %s %u SHA\n",
		$$row{id}, $$row{potential}, $$row{prod},
		$$row{kver} / 100, $$row{kver} % 100, $$row{ref}, $$row{sha},
		$$row{fixed_by} // '-', $0, $$row{id};
}
print "\n";

END {
	print "\n";
	if (defined $db && $db->{Active}) {
		print "Committing\n";
		$db->commit;
		$db->disconnect;
	}
}

1;
